package com.verizontelematics.indrivemobile.httpwrapper.Impl;

import android.os.Environment;
import android.util.Log;

import com.verizontelematics.indrivemobile.utils.FileUtils;
import com.verizontelematics.indrivemobile.utils.config.InDrivePreference;
import com.verizontelematics.indrivemobile.utils.security.SecurityUtil;

import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.security.KeyStore;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import javax.net.ssl.TrustManager;
import javax.net.ssl.TrustManagerFactory;
import javax.net.ssl.X509TrustManager;

/**
 * Created by bijesh on 4/30/2015.
 */
class ReloadableX509TrustManager
        implements X509TrustManager {

    private static final String TAG = ReloadableX509TrustManager.class.getCanonicalName();

//    private final String trustStorePath;
    private X509TrustManager trustManager;
    private List<Certificate> tempCertList = new ArrayList<Certificate>();

    public ReloadableX509TrustManager()
            throws Exception {
//        this.trustStorePath = tspath;
        reloadTrustManager();
    }

    @Override
    public void checkClientTrusted(X509Certificate[] chain,
                                   String authType) throws CertificateException {
        trustManager.checkClientTrusted(chain, authType);
    }

    @Override
    public void checkServerTrusted(X509Certificate[] chain,
                                   String authType) throws CertificateException {
        try {
            trustManager.checkServerTrusted(chain, authType);
        } catch (CertificateException cx) {
            addServerCertAndReload(chain[0], false);
            trustManager.checkServerTrusted(chain, authType);
        }
    }

    @Override
    public X509Certificate[] getAcceptedIssuers() {
        X509Certificate[] issuers
                = trustManager.getAcceptedIssuers();
        return issuers;
    }

    private void reloadTrustManager() throws Exception {

        // load keystore from specified cert store (or default)
        KeyStore ts = KeyStore.getInstance(
                KeyStore.getDefaultType());
        Log.d(TAG, "reloadTrustManager KeyStore default "+KeyStore.getDefaultType());
        InputStream in = null;
        File p12File = getClientCertFile1(SecurityUtil.getCurrentUserPk12FileName());////   "client-cert.p12"
        boolean p12FileExists = false;
        if(p12File != null && p12File.exists()) {
            Log.d(TAG,"p12file exists ");
            in = new FileInputStream(p12File);//new FileInputStream(trustStorePath);
            try {
                ts.load(null, null);
            } finally {
                in.close();
            }
        }else{
            Log.d(TAG,"p12file does not exists ");
            ts.load(null,null);
        }
        // add all temporary certs to KeyStore (ts)
//        for (Certificate cert : tempCertList) {
//            ts.setCertificateEntry(UUID.randomUUID()+"", cert);
//        }
        if(p12FileExists) {
            Log.d(TAG,"p12 file "+p12FileExists);
            String signed_cert = InDrivePreference.getInstance().getStringData("cert", ""); //FileUtils.readCertFromAppInternal(IndriveApplication.getInstance());
//            signed_cert = KeyStoreWrapper.getInstance().getKeyStore().getCertificate("cert");
            Log.d(TAG, "layer7 signed_cert " + signed_cert);
            X509Certificate x509Certificate = (X509Certificate) getCertificate(signed_cert);
            ts.setCertificateEntry(x509Certificate.getSubjectX500Principal().getName(), x509Certificate);
        }else{
                    for (Certificate cert : tempCertList) {
            ts.setCertificateEntry(UUID.randomUUID()+"", cert);
            }
        }


        // initialize a new TMF with the ts we just loaded
        TrustManagerFactory tmf
                = TrustManagerFactory.getInstance(
                TrustManagerFactory.getDefaultAlgorithm());
        tmf.init(ts);

        // acquire X509 trust manager from factory
        TrustManager tms[] = tmf.getTrustManagers();
        for (int i = 0; i < tms.length; i++) {
            if (tms[i] instanceof X509TrustManager) {
                trustManager = (X509TrustManager)tms[i];
                return;
            }
        }

        throw new NoSuchAlgorithmException(
                "No X509TrustManager in TrustManagerFactory");
    }


    public Certificate getCertificate(String mServerSignedCertificate) {
        Log.d(TAG,"layer7 $$ getCertificate "+mServerSignedCertificate);
        CertificateFactory cf = null;
        InputStream caInput = null;
        try {
            cf = CertificateFactory.getInstance("X.509","BC");
        }catch (CertificateException e){
            e.printStackTrace();
        }catch (NoSuchProviderException e){
            e.printStackTrace();
        }
        Certificate ca = null;
        caInput = new BufferedInputStream(new ByteArrayInputStream(mServerSignedCertificate.getBytes()));
        try {
            Log.d(TAG,"layer7 before generating certificate");
            ca = cf.generateCertificate(caInput);
            if(ca != null) {
                Log.d(TAG, "layer7 ca=" + ((X509Certificate) ca).getSubjectDN());
                Log.d(TAG, "layer7 public key " + ((X509Certificate) ca).getPublicKey());

            }
        }catch (CertificateException e){
            e.printStackTrace();
        }
        finally {
            try {
                caInput.close();
            }catch (Exception e){
                e.printStackTrace();
            }
        }
        return ca;
    }



    private File getClientCertFile(String clientCertificateName) {
        File externalStorageDir = Environment.getExternalStorageDirectory();
        return new File(externalStorageDir, clientCertificateName);
    }

    private File getClientCertFile1(String clientCertificateName){
        return FileUtils.readInternalFile(clientCertificateName);
    }


    private void addServerCertAndReload(Certificate cert,
                                        boolean permanent) {
        try {
            if (permanent) {
                // import the cert into file trust store
                // Google "java keytool source" or just ...
                Runtime.getRuntime().exec("keytool -importcert ...");
            } else {
                tempCertList.add(cert);
            }
            reloadTrustManager();
        } catch (Exception ex) { /* ... */ }
    }
}
