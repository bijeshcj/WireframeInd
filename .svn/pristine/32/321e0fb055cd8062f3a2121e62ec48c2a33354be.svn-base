package com.verizontelematics.indrivemobile.activity;

import android.app.Activity;
import android.app.SearchManager;
import android.content.Context;
import android.content.Intent;
import android.graphics.drawable.ColorDrawable;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.support.v4.app.ActionBarDrawerToggle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBar;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.widget.AdapterView;
import android.widget.Button;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.verizontelematics.indrivemobile.R;
import com.verizontelematics.indrivemobile.adapters.HomeMenuAdapter;
import com.verizontelematics.indrivemobile.adapters.fragmentpageradapters.AppSectionsPagerAdapter;
import com.verizontelematics.indrivemobile.common.SlidingTabLayout;
import com.verizontelematics.indrivemobile.components.view.ViewPager;
import com.verizontelematics.indrivemobile.constants.WidgetConstants;
import com.verizontelematics.indrivemobile.controllers.AppController;
import com.verizontelematics.indrivemobile.controllers.AuthenticateController;
import com.verizontelematics.indrivemobile.fragments.BaseUI;
import com.verizontelematics.indrivemobile.fragments.BaseUIScreenFragment;
import com.verizontelematics.indrivemobile.fragments.UIScreen;
import com.verizontelematics.indrivemobile.fragments.VehicleHealthFragment;
import com.verizontelematics.indrivemobile.models.data.AppStateData;
import com.verizontelematics.indrivemobile.userprofile.UserFactory;
import com.verizontelematics.indrivemobile.utils.config.Config;
import com.verizontelematics.indrivemobile.utils.phone.CryptoWrapper;
import com.verizontelematics.indrivemobile.utils.phone.SessionManager;

import java.util.ArrayList;
import java.util.List;


/**
 * Created by bijesh on 8/20/2014.
 */

public class HomeActivity extends BaseFragmentActivity implements BaseUI, ViewPager.OnPageChangeListener, SessionManager.OnSessionExpireListener, WidgetConstants {
    private static final String TAG = HomeActivity.class.getCanonicalName();
    public static final int LEFT_ARROW_ID = R.id.ab_back_arrow;
    public static final int DONE_BUTTON_ID = R.id.ab_save_btn;
    private DrawerLayout mDrawerLayout;
    private ListView mDrawerList;
    private ActionBarDrawerToggle mDrawerToggle;
    private ViewPager mViewPager;
    private android.support.v7.app.ActionBar mActionBar;
    private SlidingTabLayout mSlidingTabLayout;

    private AppSectionsPagerAdapter mAppSectionsPagerAdapter;
    private UIState mUIState = new UIState();
    private UIScreen mCurrentPage;
    private int selectedTab = 0;


    // Module names
    private String[] mModulesNames;

    public static interface CustomTopBarItemsClickListener {

        public void onTopBarItemClick(View aView);

    }

    private List<CustomTopBarItemsClickListener> leftArrowHandlers = new ArrayList<CustomTopBarItemsClickListener>();
    private List<CustomTopBarItemsClickListener> doneButtonHandlers = new ArrayList<CustomTopBarItemsClickListener>();


    public void removeFromLeftArrowHandlers(CustomTopBarItemsClickListener aHandler) {
        leftArrowHandlers.remove(aHandler);
    }

    public void removeFromDoneButtonHandlers(CustomTopBarItemsClickListener aHandler) {
        doneButtonHandlers.remove(aHandler);
    }

    public void addToLeftArrowClickHandlers(CustomTopBarItemsClickListener aHandlers) {
        leftArrowHandlers.add(0, aHandlers);
    }

    public void addToDoneButtonClickHandlers(CustomTopBarItemsClickListener aHandlers) {
        doneButtonHandlers.add(0, aHandlers);
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        Bundle extras = getIntent().getExtras();
        if (extras != null) {
            selectedTab = getIntent().getExtras().getInt("SelectedIndex", 0);
        }


        // set content view
        setContentView(R.layout.activity_home);
        setup();
        FragmentManager mFragmentManager = getSupportFragmentManager();
        // we are in home activity so user has logged in.
        CryptoWrapper.decryptDB(getApplicationContext());
    }

    private void launchedFromWidget(Bundle bundle) {

        if (bundle != null) {
            int position = bundle.getInt(SHOW_POSITION);

            selectPage(position);
            mViewPager.setCurrentItem(position);
            FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
            Fragment vehicleHealthFragment = new VehicleHealthFragment();
            transaction.addToBackStack("VehicleHealth");
            transaction.replace(R.id.container_id_diagnostics, vehicleHealthFragment, "VehicleHealth");
            transaction.commit();
        }

    }


    //    private void showCoach(){
//        new ShowcaseView.Builder(this)
//                .setTarget(new ActionViewTarget(this, ActionViewTarget.Type.HOME))
//                .setContentTitle("Know more about your Home Screen").setStyle(R.style.CustomShowcaseThemeHomeActivity)
//                .setContentText("Click on the navigation drawer to see more options")
//                .hideOnTouchOutside()
//                .build();
//    }
    private void logOutAction() {

        TextView logOutTV = (TextView) findViewById(R.id.logoutTV);
        logOutTV.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                logOut();
            }
        });
    }

    private void setup() {
        Config.getInstance(getApplicationContext());

        // get module names
        mModulesNames = getResources().getStringArray(R.array.module_array);

        // Setup Action bar

        setupActionBar();

        // Setup sliding drawer layout
        mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
        mDrawerLayout.setDrawerShadow(R.drawable.drawer_shadow, GravityCompat.START);
        mDrawerLayout.setDrawerListener(mDrawerToggle);
        // init drawer callbacks
        initDrawerToggle();

        // Setup sliding drawer list.
        mDrawerList = (ListView) findViewById(R.id.left_drawer);
        // set option list adapter
        mDrawerList.setAdapter(new HomeMenuAdapter(this, getResources().getStringArray(R.array.slide_menu_array)));
        // set onItem selection listener
        mDrawerList.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> adapterView, View view, int position, long l) {
                switch (position) {
                    case 0:
                        //Home
                        finish();
                        mDrawerLayout.closeDrawers();
                        break;
                    case 1:
                        //App Settings
                        mDrawerLayout.closeDrawers();
                        launchActivity(AppSettingsActivity.class);
                        break;
                    case 2:
                        //Premium Services
                        mDrawerLayout.closeDrawers();
                        launchActivity(PremiumServicesActivity.class);
                        break;
                    case 3:
                        //Customer Support
                        mDrawerLayout.closeDrawers();
                        launchActivity(CustomerSupportActivity.class);
                        break;
                    case 4:
                        //Profile Settings
                        mDrawerLayout.closeDrawers();
                        launchActivity(ProfileActivity.class);
                        break;
                    case 5:
                        //FAQ
                        mDrawerLayout.closeDrawers();
                        launchActivity(FAQActivity.class);
                        break;
                    default:
                        break;

                }
            }
        });

        // Setup ViewPager
        mViewPager = (ViewPager) findViewById(R.id.viewpager);
        mViewPager.setOnPageChangeListener(this);

        // Setup Sliding Tab bar
        mSlidingTabLayout = (SlidingTabLayout) findViewById(R.id.sliding_tabs);

        mSlidingTabLayout.setCustomTabView(R.layout.custom_tab_view, R.id.textView, R.id.imageButton);

        mSlidingTabLayout.setOnPageChangeListener(this);


        // Create viewpager adapter
        createViewPagerAdapter();

        // setup session timeout
        // right now the value is hard coded we have to extract from settings or config file.
        //SessionManager.getInstance().setTimeoutPeriod(15 * 60 * 1000);
        // setup SessionExpire listeners
        //SessionManager.getInstance().setOnSessionExpireListener(this);

        mViewPager.setCurrentItem(selectedTab);

        logOutAction();

    }

    private void setupActionBar() {

        mActionBar = getSupportActionBar();
        setActionBarTextColor();

        if (mActionBar == null)
            return;

        // Enable & Show Home button
        mActionBar.setDisplayHomeAsUpEnabled(true);
        mActionBar.setHomeButtonEnabled(true);
        mActionBar.setDisplayShowHomeEnabled(true);

        // setup action bar title.
        mActionBar.setTitle("Home");
    }

    private void launchActivity(Class<? extends Activity> activityTypeClass) {

        Intent intent = new Intent(this, activityTypeClass);
        startActivity(intent);
    }


    private void selectPage(int position) {
        if (mDrawerList != null) {
            if (position >= 0 && position < mUIState.mUIScreens.size()) {
                UIScreen uiScreenFragment = mUIState.mUIScreens.get(position);

                mDrawerList.setItemChecked(uiScreenFragment.getCurrentSelectedOptionItemIndex(), true);
                mDrawerList.setSelection(uiScreenFragment.getCurrentSelectedOptionItemIndex());

                setTitle(uiScreenFragment.getTitle());

                mActionBar.setBackgroundDrawable(getResources().getDrawable(mAppSectionsPagerAdapter.getHeaderBackground(position)));

                mSlidingTabLayout.setSelectedIndicatorColors(uiScreenFragment.getBackgroundColor());

                // callbacks

                if (mCurrentPage != null && mCurrentPage != uiScreenFragment) {
                    mCurrentPage.onPageSelectionLost();
                }


                mCurrentPage = uiScreenFragment;
                uiScreenFragment.onPageSelected();
            }
        }
    }

    private void createViewPagerAdapter() {

        if (mAppSectionsPagerAdapter == null) {
            mAppSectionsPagerAdapter = new AppSectionsPagerAdapter(getSupportFragmentManager(), this);

        }
        mViewPager.setOffscreenPageLimit(mAppSectionsPagerAdapter.getCount());
        // set adapter to view pager
        mViewPager.setAdapter(mAppSectionsPagerAdapter);

        // set viewpager to tab layout
        mSlidingTabLayout.setViewPager(mViewPager);
//        new Handler().postDelayed(new Runnable() {
//            @Override
//            public void run() {
//                launchedFromWidget(getIntent().getExtras());
//            }
//        }, 50);

    }

    private void initDrawerToggle() {

        mDrawerToggle = new ActionBarDrawerToggle(this, mDrawerLayout, R.drawable.side_menu,
                R.string.drawer_open, R.string.drawer_close) {

            @Override
            public void onDrawerOpened(View drawerView) {
                invalidateOptionsMenu(); // creates call to onPrepareOptionsMenu()
            }

            @Override
            public void onDrawerClosed(View drawerView) {
                invalidateOptionsMenu(); // creates call to onPrepareOptionsMenu()
            }
        };
    }


    /**
     * When using the ActionBarDrawerToggle, you must call it during
     * onPostCreate() and onConfigurationChanged()...
     */
    @Override
    protected void onPostCreate(Bundle savedInstanceState) {
        super.onPostCreate(savedInstanceState);
        // Sync the toggle state after onRestoreInstanceState has occurred.
        mDrawerToggle.syncState();
        // initialize the UI Screen.
        selectPage(mViewPager.getCurrentItem());
    }


    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.splash, menu);
        return true;
    }

    /* Called whenever we call invalidateOptionsMenu() */
    @Override
    public boolean onPrepareOptionsMenu(Menu menu) {
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        super.onOptionsItemSelected(item);
        if (mDrawerToggle.onOptionsItemSelected(item)) {
            return true;
        }
        // Handle action buttons
        switch (item.getItemId()) {
            case R.id.action_settings:
                // create intent to perform web search for this planet
                Intent intent = new Intent(Intent.ACTION_WEB_SEARCH);
                intent.putExtra(SearchManager.QUERY, mActionBar.getTitle());
                // catch event that there's no activity to handle intent
                if (intent.resolveActivity(getPackageManager()) != null) {
                    startActivity(intent);
                } else {
                    Toast.makeText(this, "app_not_available", Toast.LENGTH_LONG).show();
                }
                return true;
            default:
                return super.onOptionsItemSelected(item);
        }
    }


    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
    }

    @Override
    public void setTitle(final String title) {

        //hack for versions below 4.3 , rendering the title bar again
        if (mActionBar != null) {
            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {
                Handler handler = new Handler();
                handler.postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        mActionBar.setTitle(title);
                    }
                }, 1);
            } else {
                mActionBar.setTitle(title);
            }

            //to set the color of text
            setActionBarTextColor();

        }
    }


    @Override
    public void setBackgroundColor(int colorId) {
        if (mActionBar != null) {
            ColorDrawable colorDrawable = new ColorDrawable(colorId);
            mActionBar.setBackgroundDrawable(colorDrawable);
        }

    }

    public void setCustomActionBarView(String titleText, boolean isCustomViewShow, boolean backArrowShow, boolean doneButtonShow, boolean isEditMode) {
        if (isCustomViewShow) {
            LayoutInflater mInflater = (LayoutInflater) this.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            View mCustomView = mInflater.inflate(R.layout.actionbar_custom_view, null);
            TextView mTitleTextView = (TextView) mCustomView.findViewById(R.id.action_bar_titleTV);
            Button actionBarDone = (Button) mCustomView.findViewById(R.id.ab_save_btn);
            if (doneButtonShow) {
                actionBarDone.setVisibility(View.VISIBLE);
            } else
                actionBarDone.setVisibility(View.INVISIBLE);

            if (isEditMode) {
                actionBarDone.setText(setAsEditMode(titleText));
            }


            actionBarDone.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    if (doneButtonHandlers.size() > 0) {
                        doneButtonHandlers.get(0).onTopBarItemClick(view);
                    }
                }
            });

            Button backCancelButton = (Button) mCustomView.findViewById(R.id.ab_back_arrow);

            if (backArrowShow) {
                backCancelButton.setVisibility(View.VISIBLE);

            } else
                backCancelButton.setVisibility(View.INVISIBLE);

            backCancelButton.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    if (leftArrowHandlers.size() > 0) {
                        leftArrowHandlers.get(0).onTopBarItemClick(view);
                    }
                }
            });
            mActionBar.setDisplayShowCustomEnabled(true);
            mActionBar.setDisplayShowHomeEnabled(false);
            mActionBar.setDisplayShowTitleEnabled(false);
            mDrawerToggle.setDrawerIndicatorEnabled(false);
            getSupportActionBar().setDisplayHomeAsUpEnabled(false);

            mTitleTextView.setText(titleText);
            ActionBar.LayoutParams layout = new ActionBar.LayoutParams(ActionBar.LayoutParams.MATCH_PARENT, ActionBar.LayoutParams.MATCH_PARENT);
            mActionBar.setCustomView(mCustomView, layout);

        } else {
            mActionBar.setDisplayShowTitleEnabled(true);
            mActionBar.setDisplayShowHomeEnabled(true);
            mActionBar.setDisplayShowCustomEnabled(false);
            mDrawerToggle.setDrawerIndicatorEnabled(true);
            getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        }
        // Hack
        // To prevent swipe when tab bar is not visible.
        mViewPager.setOnTouchListener((mSlidingTabLayout.getVisibility() == View.GONE) ? new View.OnTouchListener() {

            public boolean onTouch(View arg0, MotionEvent arg1) {
                return true;
            }
        } : null);


    }

    private String setAsEditMode(String type) {
        String retVal = getResources().getString(R.string.done);
        if (type.equals("Maintenance Log") || type.equals("Maintenance Reminder")) {
            retVal = "Edit";
        }
        return retVal;
    }


    @Override
    public UIState getUIState() {
        return mUIState;
    }

    @Override
    public void refresh(int index) {
        if (mViewPager == null)
            return;

        if (index == mViewPager.getCurrentItem()) {
            selectPage(mViewPager.getCurrentItem());

        }
    }

    @Override
    public String[] getModuleNames() {
        return mModulesNames;
    }

    @Override
    public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {

    }

    @Override
    public void onPageSelected(int position) {
        selectPage(position);
    }


    @Override
    public void onPageScrollStateChanged(int state) {

    }

    public void showTabBar(boolean flag) {
        mSlidingTabLayout.setVisibility(flag ? View.VISIBLE : View.GONE);
        // Hack to not navigate viewpager in full screen mode.
        mViewPager.setOnTouchListener(flag ? new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {
                return true;
            }
        } : null);


    }

    public DrawerLayout getDrawerLayout() {
        return mDrawerLayout;
    }

    public String[] getAlertTypes() {
        return (getResources().getStringArray(R.array.maintenance_alert_type));
    }

    @Override
    public void onResume() {
        super.onResume();
        SessionManager.getInstance().start();
        selectPage(mViewPager.getCurrentItem());
    }

    @Override
    public void onUserInteraction() {
        super.onUserInteraction();
        SessionManager.getInstance().interrupt();
    }

    @Override
    public void onSessionExpire() {
        if (AppController.instance().getStayLoggedSetting()) {
            AuthenticateController.instance().refresh(this, AppController.instance().getMobileUserId(), AppController.instance().getPasword());
            return;
        }
        logOut();
    }

    @Override
    public void onDestroy() {
        super.onResume();
        CryptoWrapper.encryptDB(getApplicationContext());

    }

    public void logOut() {
        finish();
        Intent loginIntent = new Intent(HomeActivity.this, LoginActivity.class);
        loginIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_NEW_TASK);
        startActivity(loginIntent);
        UserFactory.clearFactoryInstance();
    }



    public void hideDrawerAndSlidingMenus() {

        mActionBar.hide();
        mSlidingTabLayout.setVisibility(View.GONE);
        // Hack
        // To prevent swipe when tab bar is not visible.
        mViewPager.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {
                return true;
            }
        });

    }

    public void showDrawerAndSlidingMenus() {
        mActionBar.show();
        mSlidingTabLayout.setVisibility(View.VISIBLE);
        // Hack to not navigate viewpager in full screen mode.
        mViewPager.setOnTouchListener(null);

    }

    public void showSlidingMenus() {
        mSlidingTabLayout.setVisibility(View.VISIBLE);
        // Hack to not navigate viewpager in full screen mode.
        mViewPager.setOnTouchListener(null);

    }

    public void hideSlidingMenus() {
        mSlidingTabLayout.setVisibility(View.GONE);
        // Hack to not navigate viewpager in full screen mode.
        mViewPager.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {
                return true;
            }
        });
    }

    public void hideLeftMenuDrawer() {
        mDrawerList.setVisibility(View.GONE);
        mViewPager.setVisibility(View.GONE);
        // Hack
        // To prevent swipe when tab bar is not visible.
        mViewPager.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {
                return true;
            }
        });
    }

    public void hideActionToggleButton() {
        mDrawerToggle.setDrawerIndicatorEnabled(false);
        getSupportActionBar().setDisplayHomeAsUpEnabled(false);
    }

    public void showActionToggleButton() {
        mDrawerToggle.setDrawerIndicatorEnabled(true);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);

    }

    @Override
    protected void onSaveInstanceState(Bundle outState) {
        outState.putString(AppStateData.VEHICLE_ID, AppController.instance().getVehicleId());
        outState.putString(AppStateData.MOBILE_USER_ID, AppController.instance().getMobileUserId());
        outState.putInt(AppStateData.VEHICLE_TYPE, AppController.instance().getVehicleType());
        // activity is being destroyed so encrypt the database.
//        CryptoWrapper.encryptDB(getApplicationContext());
    }

    @Override
    protected void onRestoreInstanceState(Bundle inState) {
        if (inState != null) {
            String id = inState.getString(AppStateData.MOBILE_USER_ID);
            AppController.instance().setMobileUserId(id);
            String vehicleId = inState.getString(AppStateData.VEHICLE_ID);
            AppController.instance().setVehicleId(id);

            int vehicleType = inState.getInt(AppStateData.VEHICLE_TYPE);
            AppController.instance().setVehicleType(vehicleType);

        }
    }

    @Override
    public void onBackPressed() {
        if (isDrawerOpened()) {
            getDrawerLayout().closeDrawers();
            return;
        }
        //super.onBackPressed();
        if (mCurrentPage != null)
            ((BaseUIScreenFragment) mCurrentPage).onBackPressed();
    }

    private boolean isDrawerOpened() {

        return mDrawerLayout.isDrawerOpen(GravityCompat.START);
    }

    public void hideCustomActionBar(String title) {
        setCustomActionBarView("",
                false, false, false, false);
        setTitle(title);
        showActionToggleButton();

    }

}