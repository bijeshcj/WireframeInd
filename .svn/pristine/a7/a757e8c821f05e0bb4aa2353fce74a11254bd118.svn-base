package com.verizontelematics.indrivemobile.fragments;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.location.Location;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.MapView;
import com.google.android.gms.maps.MapsInitializer;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.Marker;
import com.verizontelematics.indrivemobile.R;
import com.verizontelematics.indrivemobile.activity.LocationHistoryPickerActivity;
import com.verizontelematics.indrivemobile.controllers.LocationController;
import com.verizontelematics.indrivemobile.controllers.UIInterface;
import com.verizontelematics.indrivemobile.customViews.dialogs.CustomProgressDialog;
import com.verizontelematics.indrivemobile.models.LocationDataModel;
import com.verizontelematics.indrivemobile.models.Operation;
import com.verizontelematics.indrivemobile.models.data.LocationHistoryDatum;
import com.verizontelematics.indrivemobile.userprofile.UserFactory;
import com.verizontelematics.indrivemobile.userprofile.UserRole;
import com.verizontelematics.indrivemobile.utils.ui.DateDataFormat;
import com.verizontelematics.indrivemobile.utils.ui.MapUtils;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Observable;
import java.util.Observer;

/**
 * Created by Priyanga on 8/20/2014.
 */
public class LocationHistoryFragment extends BaseSubUIFragment implements UIInterface, Observer {

    private GoogleMap googleMap;
    private MapView locationHistoryMapView;
    private static final int GET_SELECTED_DAY = 10;
    private TextView selectedDayTV;
    private View rootView;
    private static String TAG = LocationHistoryFragment.class.getCanonicalName();
    @SuppressLint("SimpleDateFormat")
    private SimpleDateFormat formatter = new SimpleDateFormat("EEEE, MMMM dd");
    private CustomProgressDialog mProgressDialogFragment;
    private UserRole mUserRole;

    public LocationHistoryFragment() {
//        Empty constructor
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {


        rootView = inflater.inflate(R.layout.activity_location_history, container, false);
        locationHistoryMapView = (MapView) rootView.findViewById(R.id.locationHistoryMapView);
        locationHistoryMapView.onCreate(savedInstanceState);
        Activity mContext = getActivity();
        setupUI();
        return rootView;
    }

    private void setupUI() {

        mUserRole = UserFactory.initUserRole(getArguments());

        googleMap = locationHistoryMapView.getMap();
        if (googleMap != null) {
            googleMap.getUiSettings().setZoomControlsEnabled(false);
            googleMap.getUiSettings().setMyLocationButtonEnabled(false);
            googleMap.setMyLocationEnabled(true);
        }
        try {
            MapsInitializer.initialize(getActivity());
        } catch (Exception e) {
            e.printStackTrace();
        }
        // Updates the location and zoom of the MapView
        if (googleMap != null) {
            googleMap.setOnMyLocationChangeListener(new GoogleMap.OnMyLocationChangeListener() {
                @Override
                public void onMyLocationChange(Location location) {

                    //centerMapOnMyLocation();


                }
            });
            googleMap.setOnMapLoadedCallback(new GoogleMap.OnMapLoadedCallback() {
                @Override
                public void onMapLoaded() {
//                    MapUtils.animateClipTo(googleMap, getLocations());
//                    showMarkers();
                }
            });
        }

        Button editDayBtn = (Button) rootView.findViewById(R.id.editDayBtn);
        editDayBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                if(mUserRole != null && mUserRole.toString().equalsIgnoreCase(UserRole.IN_ACTIVE.toString())){
                    Toast.makeText(getActivity(),"Inactive Role",Toast.LENGTH_LONG).show();
                    return;
                }
                Intent intent = new Intent(getActivity(), LocationHistoryPickerActivity.class);
                startActivityForResult(intent, GET_SELECTED_DAY);

            }
        });

        selectedDayTV = (TextView) rootView.findViewById(R.id.selectedDayTV);
        selectedDayTV.setText(getDefault());
        LocationController.instance().getLocationHistoryModel().addObserver(this);
        LocationController.instance().register(this);

        //Initially calling the history of CurrentDay
        callLocationHistory(DateDataFormat.getStartTimeOfADay(System.currentTimeMillis()), DateDataFormat.getEndTimeOfADay(System.currentTimeMillis()));
    }



    private void callLocationHistory(final long dayStart, final long dayEnd) {

        Handler handler = new Handler();
        handler.postDelayed(new Runnable() {
            @Override
            public void run() {

                LocationController.instance().getLocationHistory(getActivity(), dayStart, dayEnd);

            }
        }, 1000);
    }


    private String getDefault() {

        Calendar calendar = Calendar.getInstance();
        return formatter.format(calendar.getTime());
    }


    private void showMarkers(ArrayList<LatLng> locations,ArrayList<String> date) {
//        ArrayList<LatLng> locations = getLocations();
//        ArrayList<String> date = getDateTime();
        Bitmap b = Bitmap.createBitmap(200, 220, Bitmap.Config.ARGB_8888);
        Canvas c = new Canvas(b);
        Paint p = new Paint();
        for (int i = 0; i < locations.size(); i++) {
            Marker marker = MapUtils.drawVehicleMarker(googleMap, locations.get(i));
            MapUtils.setMarkerWithAddress(getActivity(), marker, locations.get(i), date.get(i));
            // create custom marker icon.
            // code need  refactor.
            c.drawBitmap(BitmapFactory.decodeResource(getResources(), R.drawable.car_locate_icon), 0, 10, p);
            p.setARGB(150, 0, 0, 0);
            p.setStrokeWidth(2);
            c.drawCircle(50, 50, 50, p);
            p.setARGB(220, 155, 255, 0);
            p.setTextSize(50);
            c.drawText(" " + (i + 1), 25, 65, p);
            marker.setIcon(BitmapDescriptorFactory.fromBitmap(b));
            // create marker icon done.
        }
        MapUtils.animateClipTo(googleMap, locations);
    }



    @Override
    public void onResume() {
        super.onResume();
        locationHistoryMapView.onResume();
    }

    @Override
    public void onPause() {
        super.onPause();
        locationHistoryMapView.onPause();
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        cleanup();
    }

    @Override
    public void onDetach() {
        super.onDetach();
        cleanup();
    }

    private void cleanup() {
        LocationController.instance().unregister(this);
        LocationController.instance().getLocationHistoryModel().deleteObserver(this);
    }



    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == GET_SELECTED_DAY) {
            if (resultCode == Activity.RESULT_OK) {

                Calendar calendar = Calendar.getInstance();
                long selectedTimeInMillis = data.getLongExtra("SelectedDay", 0);
                calendar.setTimeInMillis(selectedTimeInMillis);
                selectedDayTV.setText(formatter.format(calendar.getTime()));
                callLocationHistory(DateDataFormat.getStartTimeOfADay(selectedTimeInMillis), DateDataFormat.getEndTimeOfADay(selectedTimeInMillis));

            }
        }
    }

    @Override
    public void onProgress(Operation opr) {
        if (opr ==  null || opr.getId() != Operation.OperationCode.GET_LOCATION_HISTORY.ordinal())
            return;
        if (mProgressDialogFragment == null) {
            mProgressDialogFragment = new CustomProgressDialog(getActivity(), "Loading location history ...");
        }
        try {
            mProgressDialogFragment.show();
        }catch (Exception e) {
            Log.d(TAG, "Error "+e.getMessage());
        }
    }

    @Override
    public void onError(Operation opr) {
        if (opr ==  null || opr.getId() != Operation.OperationCode.GET_LOCATION_HISTORY.ordinal())
            return;
        if (mProgressDialogFragment != null) {
            mProgressDialogFragment.dismiss();
        }
//        showAlertDialog(getResources().getString(R.string.location_history), getResources().getString(R.string.no_location_history));

        Toast.makeText(getActivity(), opr.getInformation() + getResources().getString(R.string.error_location_history), Toast.LENGTH_SHORT).show();
    }

    @Override
    public void onSuccess(Operation opr) {
        if (opr ==  null || opr.getId() != Operation.OperationCode.GET_LOCATION_HISTORY.ordinal())
            return;
        if (mProgressDialogFragment != null) {
            mProgressDialogFragment.dismiss();
        }
    }

    @Override
    public void update(final Observable observable, final Object data) {
        Log.d(TAG, "$$$ update received here");
        if (LocationDataModel.class.isInstance(observable)) {
            getActivity().runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    List<LocationHistoryDatum> locationDataList = (List<LocationHistoryDatum>) data;
                    if ((locationDataList != null) && (locationDataList.size() > 0)) {
                        populateUI(locationDataList);
                    } else {
                        //Show Alert as no location history.
                        showAlertDialog(getResources().getString(R.string.location_history), getResources().getString(R.string.no_location_history));
                    }
                }
            });
        }
    }

    private void populateUI(List<LocationHistoryDatum> locationData) {

        @SuppressLint("SimpleDateFormat") SimpleDateFormat sdf = new SimpleDateFormat("dd-M-yyyy hh:mm:ss");
        ArrayList<LatLng> locations = new ArrayList<LatLng>();
        ArrayList<String> locationsTime = new ArrayList<String>();

        for (int i = 0; i < locationData.size(); i++) {
            LocationHistoryDatum locationHistoryDatum = locationData.get(i);
            LatLng latLng = new LatLng(locationHistoryDatum.getLatitude(), locationHistoryDatum.getLongitude());
            Long time = locationHistoryDatum.getDate();
            locations.add(latLng);
            locationsTime.add(getLocationDate(sdf, time));
        }
        showMarkers(locations, locationsTime);


    }

    private void showAlertDialog(String title, String message) {
        new AlertDialog.Builder(getActivity())
                .setTitle(title)
                .setMessage(message)
                .setIcon(android.R.drawable.ic_dialog_alert)
                .setNeutralButton(android.R.string.ok, new DialogInterface.OnClickListener() {

                    public void onClick(DialogInterface dialog, int whichButton) {


                    }
                })
                .show();
    }

    private String getLocationDate(SimpleDateFormat sdf,Long date){
        String returnDate = sdf.format(date);

        return returnDate;
    }
}
