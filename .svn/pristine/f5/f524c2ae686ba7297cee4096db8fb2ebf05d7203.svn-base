package com.verizontelematics.indrivemobile.userprofile;

import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.util.Log;

import com.verizontelematics.indrivemobile.activity.UpSellPageActivity;
import com.verizontelematics.indrivemobile.constants.UIConstants;
import com.verizontelematics.indrivemobile.fragments.BaseSubUIFragment;
import com.verizontelematics.indrivemobile.fragments.UpSellPageFragment;
import com.verizontelematics.indrivemobile.userprofile.utils.XMLUtils;

import java.lang.reflect.Field;

/**
 * Created by Bijesh on 31-01-2015.
 */
public class UserFactory implements GetView{

    private static final String TAG = UserFactory.class.getCanonicalName();
    private static UserType userType;
    private static UserFactory instance;
    private static Context context;
    private static final String USER_PREFERENCE = "UserPreference";
    private static final String USER_TYPE = "userType";
    private static final String USER_ROLE = "userRole";
    private static final String CONNECT_USER = "Connect";
    private static final String COPILOT_USER = "CoPilot";
    private static final String GUARDIAN_USER = "Guardian";
    private static final String ACTIVE_ROLE = "activeRole";
    private static final String INACTIVE_ROLE = "inactiveRole";


     private UserFactory(){

     }

    public static UserFactory getInstance(Context appContext){
        if(instance == null){
            context = appContext;
            instance = new UserFactory();
            userType = getCurrentUserType();
            XMLUtils.parseXML(context,userType);
        }
        return instance;
    }

    private static UserType getCurrentUserType(){
        SharedPreferences sharedPreferences = context.getSharedPreferences(USER_PREFERENCE, Context.MODE_PRIVATE);
//        TODO: as of now hard coded the user type and user role , later on we have to get from the login details
        String userType = sharedPreferences.getString(USER_TYPE, GUARDIAN_USER);
        String userRole = sharedPreferences.getString(USER_ROLE, INACTIVE_ROLE);
        return getUserTypeAndRole(userType,userRole);
    }

    private static UserType getUserTypeAndRole(String userType,String userRole){
        if(userType.equalsIgnoreCase(CONNECT_USER)){
             if(userRole.equalsIgnoreCase(ACTIVE_ROLE)){
                 return  new Connect(UserRole.ACTIVE);
             }else{
                 return new Connect(UserRole.IN_ACTIVE);
             }
        }else if(userType.equalsIgnoreCase(COPILOT_USER)){
            if(userRole.equalsIgnoreCase(ACTIVE_ROLE)){
                return  new CoPilot(UserRole.ACTIVE);
            }else{
                return new CoPilot(UserRole.IN_ACTIVE);
            }
        }else{
            if(userRole.equalsIgnoreCase(ACTIVE_ROLE)){
                return  new Guardian(UserRole.ACTIVE);
            }else{
                return new Guardian(UserRole.IN_ACTIVE);
            }
        }
    }


//    creates the User based on login from the values saved on shared prefs

     public static UserType getUserType(){
         return userType;
     }


    @Override
    public Class getActivityView(Class defaultActivity,String subModuleType) {

        try {
            Class userClass = getUserClass(userType.getClass().getSimpleName());
            Field field = userClass.getDeclaredField(subModuleType);
            field.setAccessible(true);
            Object valueAsObject = field.get(userType);
            System.out.println("$$$ valueAsObject "+valueAsObject);
            if(valueAsObject.toString().equalsIgnoreCase("UpsellPage")){
                defaultActivity = UpSellPageActivity.class;
            }
        }catch (NoSuchFieldException e){
            e.printStackTrace();
        }catch (IllegalAccessException e){
            e.printStackTrace();
        }
        return defaultActivity;
    }



    public Intent getActivityViewIntent(Context context,Class defaultActivity,String subModuleType) {
        Intent intent = new Intent(context,defaultActivity);
        try {
            Class userClass = getUserClass(userType.getClass().getSimpleName());
            Field field = userClass.getDeclaredField(subModuleType);
            field.setAccessible(true);
            Object valueAsObject = field.get(userType);
            System.out.println("$$$ valueAsObject "+valueAsObject);
            if(valueAsObject.toString().equalsIgnoreCase("UpsellPage")){
                defaultActivity = UpSellPageActivity.class;
                intent = new Intent(context,defaultActivity);
            } else{
                if(valueAsObject.toString().equalsIgnoreCase(UserRole.ACTIVE.toString())){
//                    deliberate empty block
                }else{
//                    Bundle bundle = new Bundle();
//                    bundle.putCharSequence(UIConstants.BUNDLE_KEY_USER_ROLE,UserRole.IN_ACTIVE.toString());
//                    defaultBaseSubUIFragment.setArguments(bundle);
                    intent.putExtra(UIConstants.BUNDLE_KEY_USER_ROLE,UserRole.IN_ACTIVE.toString());
                }
            }
        }catch (NoSuchFieldException e){
            e.printStackTrace();
        }catch (IllegalAccessException e){
            e.printStackTrace();
        }
        return intent;
    }

    @Override
    public Fragment getFragmentView(Fragment defaultFragment) {
        return null;
    }

    @Override
    public BaseSubUIFragment getBaseSubUIFragment(BaseSubUIFragment defaultBaseSubUIFragment,String subModuleType) {
        Log.d(TAG, "$$$ Current user type " + userType.getClass().getSimpleName());

        try {
            Class userClass = getUserClass(userType.getClass().getSimpleName());
            Field field = userClass.getDeclaredField(subModuleType);
            field.setAccessible(true);
            Object valueAsObject = field.get(userType);
            System.out.println("$$$ valueAsObject "+valueAsObject);
            if(valueAsObject.toString().equalsIgnoreCase("UpsellPage")){
                defaultBaseSubUIFragment = new UpSellPageFragment();
            }
            else{
                if(valueAsObject.toString().equalsIgnoreCase(UserRole.ACTIVE.toString())){
//                    deliberate empty block
                }else{
                    Bundle bundle = new Bundle();
                    bundle.putCharSequence(UIConstants.BUNDLE_KEY_USER_ROLE,UserRole.IN_ACTIVE.toString());
                    defaultBaseSubUIFragment.setArguments(bundle);
                }
            }
        }catch (NoSuchFieldException e){
            e.printStackTrace();
        }catch (IllegalAccessException e){
            e.printStackTrace();
        }
        return defaultBaseSubUIFragment;
    }


    public BaseSubUIFragment getBaseSubUIFragment(BaseSubUIFragment defaultBaseSubUIFragment,String[] subModuleTypes) {
        Log.d(TAG, "$$$ Current user type " + userType.getClass().getSimpleName());
        Bundle bundle = new Bundle();
//        boolean isActive = true;
        try {
            Class userClass = getUserClass(userType.getClass().getSimpleName());
            for(String sub:subModuleTypes){
                Field field = userClass.getDeclaredField(sub);
                field.setAccessible(true);
                Object valueAsObject = field.get(userType);
                System.out.println("$$$ valueAsObject "+valueAsObject);
                if(valueAsObject.toString().equalsIgnoreCase("UpsellPage")){
                    defaultBaseSubUIFragment = new UpSellPageFragment();
                }else{
                    if(valueAsObject.toString().equalsIgnoreCase(UserRole.ACTIVE.toString())){
//                       isActive = true;
                    }else{
                        System.out.println("$$$ inactive here setting in bundle");
                        bundle.putCharSequence(sub,UserRole.IN_ACTIVE.toString());
                        defaultBaseSubUIFragment.setArguments(bundle);
                    }
                }

            }
        }catch (NoSuchFieldException e){
            e.printStackTrace();
        }catch (IllegalAccessException e){
            e.printStackTrace();
        }
        return defaultBaseSubUIFragment;
    }



    private Class getUserClass(String userTypeClassName){
        if(userTypeClassName.equalsIgnoreCase("Connect")){
            return Connect.class;
        }else if(userTypeClassName.equalsIgnoreCase("CoPilot")){
            return CoPilot.class;
        }else
            return Guardian.class;
    }


    public static UserRole initUserRole(Bundle bundle){
        if(bundle != null) {
            String userRole = bundle.getString(UIConstants.BUNDLE_KEY_USER_ROLE);
            if (userRole != null && userRole.equalsIgnoreCase(UserRole.IN_ACTIVE.toString())) {
                return UserRole.IN_ACTIVE;
            }
        }
        return UserRole.ACTIVE;
    }

    //    public BaseSubUIFragment getFragmentView(HomeActivity activity,BaseUIScreenFragment homeFragment,Fragment defaultFragment,
//                                             FragmentTransaction transaction,String title,String addToBackStackString,int titlePosition) {
//
//        BaseSubUIFragment fragment = null;
//
////        if (fragment != null) {
//////            ((HomeActivity)getActivity()).hideCustomActionBar(title);
////            activity.hideCustomActionBar(title);
////            fragment.setHomeFragment(homeFragment);
////            transaction.setCustomAnimations(R.anim.slide_in_left, R.anim.slide_out, R.anim.slide_in_left, R.anim.slide_out);
////            transaction.addToBackStack(addToBackStackString);
////            transaction.add(R.id.container_id_location, fragment, addToBackStackString);
////            transaction.commit();
////            mTitle = getActivity().getResources().getStringArray(R.array.location_list_options)[position-1];
////            homeFragment.pushFragmentStack(addToBackStackString);
////        }
//
//        return null;
//    }
}
