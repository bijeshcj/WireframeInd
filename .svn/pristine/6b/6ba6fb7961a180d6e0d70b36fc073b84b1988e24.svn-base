package com.verizontelematics.indrivemobile.fragments;

import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import android.os.Handler;
import android.support.v4.app.Fragment;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ListView;
import android.widget.NumberPicker;
import android.widget.RelativeLayout;

import com.verizontelematics.indrivemobile.R;
import com.verizontelematics.indrivemobile.activity.HomeActivity;
import com.verizontelematics.indrivemobile.adapters.DashBoardTabsAdapter;
import com.verizontelematics.indrivemobile.controllers.AppController;
import com.verizontelematics.indrivemobile.controllers.AuthenticateController;
import com.verizontelematics.indrivemobile.controllers.UIInterface;
import com.verizontelematics.indrivemobile.models.AlertHistory;
import com.verizontelematics.indrivemobile.models.Operation;
import com.verizontelematics.indrivemobile.models.UserAccountInfoModel;
import com.verizontelematics.indrivemobile.models.data.UserDetail;
import com.verizontelematics.indrivemobile.models.data.UserRegistrationData;
import com.verizontelematics.indrivemobile.models.data.VehicleData;
import com.verizontelematics.indrivemobile.utils.ui.RefUtil;

import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;

/**
 * Created by priyanga on 11/20/2014.
 */
public class MenuFragment extends Fragment implements UIInterface, Observer {

    private DashBoardTabsAdapter mDashBoardTabsAdapter;
    UserRegistrationData mUserRegistrationData;
    private NumberPicker mVehcileSelectionPicker;
    RelativeLayout splash_screen_red;


    // stub data
    String vehicles[] = {"1659", "300950406", "1136"};
    ArrayList<String> mVehicles = new ArrayList<String>();

    // stub ened.

//    private AlertDetailHistoryAdapter mNotificationAdapter;

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View rootView = inflater.inflate(R.layout.dashboard, container, false);

        setup(rootView);
        Handler handler = new Handler();
        handler.postDelayed(new Runnable() {
            @Override
            public void run() {
                mUserRegistrationData = AuthenticateController.instance().getUserRegistrationData();
                AuthenticateController.instance().getUserAccountVehicleDeviceInfo(getActivity(), mUserRegistrationData.getMobileUserID());
            }
        }, 700);

        return rootView;
    }

    private void setup(View rootView) {
        // stub
        mVehicles.add(vehicles[0]);
        mVehicles.add(vehicles[1]);
        mVehicles.add(vehicles[2]);
        // stub ended.
        ListView mDashBoardMenuLV = (ListView) rootView.findViewById(R.id.dashboardMenuLV);
//        ListView mNotificationAlertLV = (ListView) rootView.findViewById(R.id.dashboard_notification_list);

        if (mDashBoardTabsAdapter == null)
            mDashBoardTabsAdapter = new DashBoardTabsAdapter(getActivity(), getResources().getStringArray(R.array.module_array));
        mDashBoardMenuLV.setAdapter(mDashBoardTabsAdapter);
        mDashBoardMenuLV.setOnItemClickListener(new AdapterView.OnItemClickListener() {

            @Override
            public void onItemClick(AdapterView<?> parent, View view,
                                    int position, long id) {
                Intent homeIntent = new Intent(getActivity(), HomeActivity.class);
                homeIntent.putExtra("SelectedIndex", position);
                Log.v("Position is ", "" + position);
                startActivity(homeIntent);

            }
        });

        mVehcileSelectionPicker = (NumberPicker) rootView.findViewById(R.id.vehicle_selection);
        mVehcileSelectionPicker.setOnValueChangedListener(new NumberPicker.OnValueChangeListener() {
            @Override
            public void onValueChange(NumberPicker numberPicker, int from, int to) {
                AppController.instance().setVehicleAccountId(Integer.parseInt(vehicles[to]));
            }
        });
        splash_screen_red = (RelativeLayout) rootView.findViewById(R.id.splash_screen_red);
        /*if (mNotificationAdapter == null)
            mNotificationAdapter = new AlertDetailHistoryAdapter(getActivity(),
                    R.layout.alert_history_detail_lv_item, populateData());
        mNotificationAlertLV.setAdapter(mNotificationAdapter);

        mNotificationAlertLV.setOnItemClickListener(new AdapterView.OnItemClickListener() {

            @Override
            public void onItemClick(AdapterView<?> parent, View view,
                                    int position, long id) {
                Intent homeIntent = new Intent(getActivity(), HomeActivity.class);
                startActivity(homeIntent);

            }

        });*/
        AuthenticateController.instance().register(this);
        AuthenticateController.instance().getUserAccountVehicleDeviceInfoModel().addObserver(this);
        populateUI();
    }

    private void populateUI() {
        populateData();

        mVehcileSelectionPicker.setDisplayedValues((String[])mVehicles.toArray());
        mVehcileSelectionPicker.setMaxValue(mVehicles.size() - 1);
        RefUtil.setNumberPickerTextColor(mVehcileSelectionPicker, Color.WHITE);
    }

    private void cleanup() {
        AuthenticateController.instance().unregister(this);
        AuthenticateController.instance().getUserAccountVehicleDeviceInfoModel().deleteObserver(this);

    }

    private ArrayList<AlertHistory> populateData() {

        ArrayList<AlertHistory> alertArrayList = new ArrayList<AlertHistory>();

        AlertHistory alertHistoryObj = new AlertHistory("Battery Low", "Service Required", "");

        alertArrayList.add(alertHistoryObj);

        alertHistoryObj = new AlertHistory("Boundary Alert", "11.42 Pm", "");

        alertArrayList.add(alertHistoryObj);

        alertHistoryObj = new AlertHistory("Speed Alert exceeded", "6/12", "");

        alertArrayList.add(alertHistoryObj);

        return alertArrayList;

    }

    @Override
    public void onResume() {
        super.onResume();
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        cleanup();
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        cleanup();
    }

    @Override
    public void onProgress(Operation opr) {
        if (opr.getId() == Operation.OperationCode.GET_USER_ACCT_VECH_DEV_INFO.ordinal()) {
            // show indrive red background splash screen.

        }
    }

    @Override
    public void onError(Operation opr) {
        if (opr.getId() == Operation.OperationCode.GET_USER_ACCT_VECH_DEV_INFO.ordinal()) {
            // stop progress
            // show error message
            // go back to previous screen.

        }
    }

    @Override
    public void onSuccess(Operation opr) {
        if (opr.getId() == Operation.OperationCode.GET_USER_ACCT_VECH_DEV_INFO.ordinal()) {
            // stop progress.
            getActivity().runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    splash_screen_red.setVisibility(View.GONE);
                    AppController.instance().setVehicleAccountId(Integer.parseInt(vehicles[mVehcileSelectionPicker.getValue()]));
                }
            });
        }
    }

    @Override
    public void update(Observable observable, Object o) {
        if (observable != null)
        return;
        // integrate vehicle list with picker
        if (UserAccountInfoModel.class.isInstance(observable)) {

            ArrayList<UserDetail> lstUserDetails = ((UserAccountInfoModel) AuthenticateController.instance().getUserAccountVehicleDeviceInfoModel()).getUserDetails();
            if (lstUserDetails != null && !lstUserDetails.isEmpty()) {
                ArrayList<VehicleData> lstVehicles = lstUserDetails.get(0).getVehicleInfo();
                if (lstVehicles != null && !lstVehicles.isEmpty()) {
                    mVehicles.clear();
                    for (VehicleData vehicleData : lstVehicles) {
                        mVehicles.add(vehicleData.getVehicleID());
                    }
                    getActivity().runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            populateUI();
                        }
                    });
                }
            }
        }
    }
}
